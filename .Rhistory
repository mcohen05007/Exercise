shiny::runApp('C:/Users/mcohen/Dropbox/R/Shiny/census-app')
shiny::runApp('C:/Users/mcohen/Dropbox/R/Shiny/census-app')
# Set Working Directory to Desired Path
setwd("C:/Users/mcohen/Documents/R/Dataiku")
######################################################################
# Read in data, tidy it up, summarize it graphically and numerically #
######################################################################
# Read in Census Learning Data
CenIncLearnDF = read.csv("census_income_learn.csv")
# Read in Names of Variables
VarNames = data.frame(read.csv("VarNames.csv"))
# Source function that prepares and visualizes the data
source("prepdata.R")
learn = prepdata(CenIncLearnDF,VarNames)
# Summarize Data
summary(learn)
library(glmnet)
# For testing hypothesis about factors determining savings, specify a model that specifies arguably plausible variables
xfactors = model.matrix(dv ~ age + weeks_worked + education + marital_status + race + gender +
capital_gains + capital_losses + stock_dividends + household_summary,learn)
x = as.matrix(data.frame(xfactors))
model = glmnet(x,y=learn[['dv']],weights = learn[['instance_weight']], alpha=1,family='binomial')
plot(cvmodel,xvar="lambda")
plot(model,xvar="lambda")
cvmodel = cv.glmnet(x,y=learn[['dv']],weights = learn[['instance_weight']], alpha=1,family='binomial')
predict(cvmodel)
predict(cvmodel,x)
predict(cvmodel,x,s="lambda.min")
predict(cvmodel,x,s="lambda.min",type = 'link')
predict(cvmodel,x,s="lambda.min",type = 'response')
predict(cvmodel,x,s="lambda.min",type = 'class')
yhat = predict(cvmodel,x,s="lambda.min",type = 'class')
comparelist(yhat,learn[['dv']])
table(predict(cvmodel,x,s="lambda.min",type = 'class'),learn[['dv']])
learn.fit = 1-sum(diag(learn.pred))/sum(learn.pred)
learn.pred = table(predict(cvmodel,x,s="lambda.min",type = 'class'),learn[['dv']])
learn.fit = 1-sum(diag(learn.pred))/sum(learn.pred)
plot(cvmodel,xvar="lambda")
library(rpart)
# grow tree
set.seed(345)
fit_tree = rpart(dv ~ age + weeks_worked + education + marital_status + race + gender + capital_gains + capital_losses + stock_dividends + household_summary,method="class",weights = learn[['instance_weight']], data=CenIncLearnDF)
plot(fit_tree2, uniform = TRUE)
text(fit_tree2,use.n = TRUE, cex = 0.75)
summary(fit_tree2)
plotcp(fit_tree)
printcp(fit_tree)
# Prune Tree
fit_tree2 = prune(fit_tree, cp = 0.012)
plot(fit_tree2, uniform = TRUE)
text(fit_tree2,use.n = TRUE, cex = 0.75)
summary(fit_tree2)
# Document Mechanical Fit
printcp(fit_tree2)
library(rpart)
# grow tree
set.seed(345)
fit_tree = rpart(dv ~ age + weeks_worked + education + marital_status + race + gender + capital_gains + capital_losses + stock_dividends + household_summary,method="class",weights = learn[['instance_weight']], data=CenIncLearnDF)
plot(fit_tree, uniform = TRUE)
text(fit_tree,use.n = TRUE, cex = 0.75)
summary(fit_tree)
plotcp(fit_tree)
printcp(fit_tree)
fit_tree = rpart(dv ~ age + weeks_worked + education + marital_status + race + gender + capital_gains + capital_losses + stock_dividends + household_summary,method="class",weights = learn[['instance_weight']], data=learn)
library(rpart)
# grow tree
set.seed(345)
fit_tree = rpart(dv ~ age + weeks_worked + education + marital_status + race + gender + capital_gains + capital_losses + stock_dividends + household_summary,method="class",weights = learn[['instance_weight']], data=learn)
plot(fit_tree, uniform = TRUE)
text(fit_tree,use.n = TRUE, cex = 0.75)
summary(fit_tree)
plotcp(fit_tree)
printcp(fit_tree)
# Prune Tree
fit_tree2 = prune(fit_tree, cp = 0.012)
plot(fit_tree2, uniform = TRUE)
text(fit_tree2,use.n = TRUE, cex = 0.75)
summary(fit_tree2)
# Document Mechanical Fit
printcp(fit_tree2)
# Read in Test Data
CenIncTestDF = read.csv("census_income_test.csv")
# Source function that prepares and visualizes the data
source("prepdata.R")
test = prepdata(CenIncLearnDF,VarNames)
# Assess logistic lasso prediction
logit_test.pred = table(predict(cvmodel,x,s="lambda.min",type = 'class'),test$dv)
logit_test.error = 1-sum(diag(logit_test.pred))/sum(logit_test.pred)
# Assess Decision Tree Prediction
tree_test.class = table(predict(fit_tree2,test,type="class"),test$dv)
tree_test.error = 1-sum(diag(tree_test.class))/sum(tree_test.class)
print(logit_test.error)
print(tree_test.error)
CenIncTestDF = read.csv("census_income_test.csv")
# Source function that prepares and visualizes the data
source("prepdata.R")
test = prepdata(CenIncTestDF,VarNames)
# Assess logistic lasso prediction
logit_test.pred = table(predict(cvmodel,x,s="lambda.min",type = 'class'),test$dv)
logit_test.error = 1-sum(diag(logit_test.pred))/sum(logit_test.pred)
print(logit_test.error)
# Assess Decision Tree Prediction
tree_test.class = table(predict(fit_tree2,test,type="class"),test$dv)
tree_test.error = 1-sum(diag(tree_test.class))/sum(tree_test.class)
print(tree_test.error)
summary(learn)
learn = prepdata(CenIncLearnDF,VarNames)
source("prepdata.R")
learn = prepdata(CenIncLearnDF,VarNames)
source("prepdata.R")
learn = prepdata(CenIncLearnDF,VarNames)
library(bayesm)
install.packages("bayesm")
library(bayesm)
rhierLinearMixture
source("prepdata.R")
learn = prepdata(CenIncLearnDF,VarNames)
source("prepdata.R")
learn = prepdata(CenIncLearnDF,VarNames)
source("prepdata.R")
learn = prepdata(CenIncLearnDF,VarNames)
source("prepdata.R")
learn = prepdata(CenIncLearnDF,VarNames)
source("prepdata.R")
learn = prepdata(CenIncLearnDF,VarNames)
graphics.off
graphics.off()
source('~/R/Dataiku/main.R')
rm(list=ls())
# Set Working Directory to your Desired Path where data files are located
setwd("C:/Users/mcohen/Documents/R/Dataiku")
######################################################################
# Read in data, tidy it up, summarize it graphically and numerically #
######################################################################
# Read in Census Learning Data
CenIncLearnDF = read.csv("census_income_learn.csv")
# Read in Names of Variables
VarNames = data.frame(read.csv("VarNames.csv"))
# Source function that prepares and visualizes the data
source("prepdata.R")
learn = prepdata(CenIncLearnDF,VarNames)
# Summarize Data
summary(learn)
###########################################################################
# Model the 50k over/under with cross-validated lasso-logistic regression #
###########################################################################
library(glmnet)
# For testing hypothesis about factors determining savings, specify a model that specifies arguably plausible variables
xfactors = model.matrix(dv ~ age + weeks_worked + education + marital_status + race + gender +
capital_gains + capital_losses + stock_dividends + household_summary,learn)
x = as.matrix(data.frame(xfactors))
# logistic lasso regression with population weighting to approximate population inference
# First identify lambda that minimizes MSE - 3-flods to keep things moving...
cvmodel = cv.glmnet(x,y=learn[['dv']],weights = learn[['instance_weight']], alpha=1,family='binomial',nfolds=3)
plot(cvmodel,xvar="lambda")
# Document Mechanical Fit
learn.pred = table(predict(cvmodel,x,s="lambda.min",type = 'class'),learn[['dv']])
learn.fit = 1-sum(diag(learn.pred))/sum(learn.pred)
learn.error = 1-sum(diag(learn.pred))/sum(learn.pred)
print(error)
print(learn.error)
###############################################
# Model the 50k over/under with decision tree #
###############################################
library(rpart)
# grow tree
set.seed(345)
fit_tree = rpart(dv ~ age + weeks_worked + education + marital_status + race + gender + capital_gains + capital_losses + stock_dividends + household_summary,method="class",weights = learn[['instance_weight']], data=learn)
plot(fit_tree, uniform = TRUE)
text(fit_tree,use.n = TRUE, cex = 0.75)
summary(fit_tree)
plotcp(fit_tree)
printcp(fit_tree)
# Prune Tree
fit_tree2 = prune(fit_tree, cp = 0.012)
plot(fit_tree2, uniform = TRUE)
text(fit_tree2,use.n = TRUE, cex = 0.75)
summary(fit_tree2)
# Document Mechanical Fit
printcp(fit_tree2)
#################################
# Asses Models on Test data set #
#################################
# Read in Test Data
CenIncTestDF = read.csv("census_income_test.csv")
# Prepares and visualize the test data
test = prepdata(CenIncTestDF,VarNames)
# Assess logistic lasso prediction
logit_test.pred = table(predict(cvmodel,x,s="lambda.min",type = 'class'),test$dv)
logit_test.error = 1-sum(diag(logit_test.pred))/sum(logit_test.pred)
print(logit_test.error)
xfactTest = model.matrix(dv ~ age + weeks_worked + education + marital_status + race + gender +
capital_gains + capital_losses + stock_dividends + household_summary,test)
xtest = as.matrix(data.frame(xfactTest))
logit_test.pred = table(predict(cvmodel,xtest,s="lambda.min",type = 'class'),test$dv)
logit_test.error = 1-sum(diag(logit_test.pred))/sum(logit_test.pred)
print(logit_test.error)
# Assess Decision Tree Prediction
tree_test.class = table(predict(fit_tree2,test,type="class"),test$dv)
tree_test.error = 1-sum(diag(tree_test.class))/sum(tree_test.class)
print(tree_test.error)
source('~/R/Dataiku/main.R')
rm(list=ls())
setwd("C:/Users/mcohen/Documents/R/Dataiku")
######################################################################
# Read in data, tidy it up, summarize it graphically and numerically #
######################################################################
# Read in Census Learning Data
CenIncLearnDF = read.csv("census_income_learn.csv")
# Read in Names of Variables
VarNames = data.frame(read.csv("VarNames.csv"))
# Source function that prepares and visualizes the data
source("prepdata.R")
learn = prepdata(CenIncLearnDF,VarNames)
# Summarize Data
summary(learn)
library(glmnet)
# For testing hypothesis about factors determining savings, specify a model that specifies arguably plausible variables
xfactors = model.matrix(dv ~ age + weeks_worked + education + marital_status + race + gender +
capital_gains + capital_losses + stock_dividends + household_summary,learn)
x = as.matrix(data.frame(xfactors))
# logistic lasso regression with population weighting to approximate population inference
# First identify lambda that minimizes MSE - 3-flods to keep things moving...
cvmodel = cv.glmnet(x,y=learn[['dv']],weights = learn[['instance_weight']], alpha=1,family='binomial',nfolds=3)
plot(cvmodel,xvar="lambda")
coef(cvmodel)
warnings()
library(rpart)
# grow tree
set.seed(345)
fit_tree = rpart(dv ~ age + weeks_worked + education + marital_status + race + gender + capital_gains + capital_losses + stock_dividends + household_summary,method="class",weights = learn[['instance_weight']], data=learn)
plot(fit_tree, uniform = TRUE)
text(fit_tree,use.n = TRUE, cex = 0.75)
summary(fit_tree)
plotcp(fit_tree)
printcp(fit_tree)
# Prune Tree
fit_tree2 = prune(fit_tree, cp = 0.012)
plot(fit_tree2, uniform = TRUE)
text(fit_tree2,use.n = TRUE, cex = 0.75)
summary(fit_tree2)
# Document Mechanical Fit
printcp(fit_tree2)
View(CenIncLearnDF)
View(CenIncLearnDF)
View(learn)
View(learn)
fit_tree2
